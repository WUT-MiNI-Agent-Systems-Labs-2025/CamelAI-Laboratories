from camel.tasks import Task, TaskManager
from camel.messages import BaseMessage
from camel.agents import RoleAssignmentAgent
from camel.societies import RolePlaying

from agents import *
from model import DefaultModel

def example_simple_conversation_agent():
    """
    Example presenting simple conversation with the agent.
    """
    agent = SimpleConversationAgent(DefaultModel.create_local_model())
    user_message = input("Enter your message: ")
    response = agent.step(user_message)

    print(response.msgs[0].content)
    print(f'Response info: {response.info}')
    print(f'Agent chat history: {agent.chat_history}')
    print(f'Agent memory {agent.memory.get_context()}')


def example_conversation_agent_with_specified_role():
    """
    Example presenting how role description impacts the agent's behavior.
    """
    rude_agent = RudeConversationAgent(DefaultModel.create_local_model())

    while True:
        user_message = input("Enter your message (or 'exit' to quit): ")

        if(user_message.lower() == 'exit'):
            break

        response = rude_agent.step(user_message)
        print(response.msgs[0].content)


def example_task_decomposition_agent():
    """
    Example presenting methods for task decomposition and evolution.
    """
    project_manager = ProjectManagerAgent(DefaultModel.create_openai_model())
    task = Task(
        content="There is a 5 person team consisting of 3 developers, 1 tester and 1 business analyst. A new project has been assigned to the team. The team is expected to deliver a mobile application in 2 years. The application is expected to work on both iOS and Android. Moreover, the project has limited budget. How would you plan the project?",
        id="task1"
    )

    task_manager = TaskManager(task)
    next_task = task_manager.evolve(task, project_manager)
    print(f"Next task: {next_task}")

    for sub_task in task.decompose(project_manager):
        print(f"Subtask: {sub_task.content}")


def example_role_assignment_agent():
    """
    Example presenting behavior of role assignment agent.
    """
    role_assignment_agent = RoleAssignmentAgent(DefaultModel.create_openai_model())
    prompt = "There is a 5 person team consisting of 3 developers, 1 tester and 1 business analyst. \
            A new project has been assigned to the team. \
            The team is expected to deliver a mobile application in 2 years. \
            The application is expected to work on both iOS and Android. \
            Moreover, the project has limited budget. How would you plan the project?"

    role_description = role_assignment_agent.run(prompt, 3)
    
    for role in role_description:
        print(f'Role: {role}')
    

def example_embodied_agent():
    """
    Example presenting how to generate and execute code using the embodied agent.
    Note: Depending on the code generated by embodied agent, it may be required to tune the prompt description.
    """
    programmer_agent = ProgrammerAgent(DefaultModel.create_openai_model())
    code_prompt = BaseMessage.make_user_message(
        role_name="user",
        content="Write a function that collects the values of the American stock market \
            and calculate the change in the last month. \
            Assume that no packages are installed so initiate installation of them within Python (use sys.executable).\
            Do not format the display of 'change'.",
    )
    response = programmer_agent.step(code_prompt)
    print(response.msg.content)


def example_role_playing_with_critic():
    """
    Example presenting interaction between different agent roles within predefined scenario.
    Note: Do not change the type of the model!
    Note 2: In order to run this example, please set up the 'OPENAI_API_KEY' environment variable 
            (apart from providing it in the config.py).
    """
    task_prompt = "Help me select the best coffee beans."
    model = DefaultModel.create_custom_openai_model('gpt-4o-mini', 3)

    assistant_agent_kwargs = dict(model=model)
    user_agent_kwargs = dict(model=model)
    critic_agent_kwargs = dict(verbose=True)

    role_playing_simulation = RolePlaying(
        assistant_role_name="Chief",
        user_role_name="Foodie",
        critic_role_name="Critic",
        task_prompt=task_prompt,
        with_task_specify=True,
        with_critic_in_the_loop=True,
        assistant_agent_kwargs=assistant_agent_kwargs,
        user_agent_kwargs=user_agent_kwargs,
        critic_kwargs=critic_agent_kwargs,
        critic_criteria="creativity, taste, medium body"
    )

    print(f'Original task {role_playing_simulation.task_prompt}')

    print(f'[Assistant] System message: {role_playing_simulation.assistant_sys_msg}')
    print(f'[User] System message: {role_playing_simulation.user_sys_msg}')
    print(f'[Critic] System message: {role_playing_simulation.critic_sys_msg}')

    chat_limit = 5
    counter = 0
    current_msg = role_playing_simulation.init_chat()

    while counter < chat_limit:
        assistant_response, user_response = role_playing_simulation.step(current_msg)

        print(f'[User] Message: {user_response.msg.content}')
        print(f'[Assistant] Message: {assistant_response.msg.content}')

        if "CAMEL_TASK_DONE" in user_response.msg.content:
            break

        current_msg = assistant_response.msg
        counter += 1

